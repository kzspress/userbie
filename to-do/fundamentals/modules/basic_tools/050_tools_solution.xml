<?hard-pagebreak?>
<section><title>solution: basic Unix tools</title>
	<para>1. Explain the difference between these two commands. This question is very important. If you don't know the answer, then look back at the <command>shell</command> chapter.</para>
	<screen>find /data -name "*.txt"</screen>
	<screen>find /data -name *.txt</screen>
	<para>When <command>*.txt</command> is quoted then the shell will not touch it. The <command>find</command> tool will look in the <command>/data</command> for all files ending in <command>.txt</command>.</para>
	<para>When <command>*.txt</command> is not quoted then the shell might expand this (when one or more files that ends in <command>.txt</command> exist in the current directory). The <command>find</command> might show a different result, or can result in a syntax error.</para>
	<para>2. Explain the difference between these two statements. Will they both work when there are 200 <command>.odf</command> files in <command>/data</command> ? How about when there are 2 million .odf files ?</para>
	<screen>find /data -name "*.odf" > data_odf.txt</screen>
	<screen>find /data/*.odf > data_odf.txt</screen>
	<para>The first <command>find</command> will output all <command>.odf</command> filenames in <command>/data</command> and all subdirectories. The shell will redirect this to a file.</para>
	<para>The second find will output all files named <command>.odf</command> in <command>/data</command> and will also output all files that exist in directories named <command>*.odf</command> (in <command>/data</command>).</para>
	<para>With two million files the command line would be expanded beyond the maximum that the shell can accept. The last part of the command line would be lost.</para>
	<para>3. Write a find command that finds all files created after January 30th 2010.</para>	
	<screen>touch -t 201001302359 marker_date
find . -type f -newer marker_date </screen>
	<screen>There is another solution :
find . -type f -newerat "20100130 23:59:59"</screen>
	<para>4. Write a find command that finds all *.odf files created in September 2009.</para>
	<screen>touch -t 200908312359 marker_start
touch -t 200910010000 marker_end
find . -type f -name "*.odf" -newer marker_start ! -newer marker_end</screen>
	<para>The exclamation mark <command>! -newer</command> can be read as <command>not newer</command>.</para>
	<para>5. Count the number of *.conf files in /etc and all its subdirs.</para>
	<screen>find /etc -type f -name '*.conf' | wc -l</screen>
	
	<para>6. Here are two commands that do the same thing: copy *.odf files to /backup/ . What would be a reason to replace the first command with the second ? Again, this is an important question.</para>
	<screen>cp -r /data/*.odf /backup/</screen>
	<screen>find /data -name "*.odf" -exec cp {} /backup/ \;</screen>
	<para>The first might fail when there are too many files to fit on one command line.</para>
	<para>7. Create a file called <command>loctest.txt</command>. Can you find this file with <command>locate</command> ? Why not ? How do you make locate find this file ?</para>
	<para>You cannot locate this with <command>locate</command> because it is not yet in the index.</para>
	<screen>updatedb</screen>
	<para>8. Use find and -exec to rename all .htm files to .html.</para>	
	<screen>
paul@rhel55 ~$ find . -name '*.htm'
./one.htm
./two.htm
paul@rhel55 ~$ find . -name '*.htm' -exec mv {} {}l \;
paul@rhel55 ~$ find . -name '*.htm*'
./one.html
./two.html</screen>
	<para>9. Issue the <command>date</command> command. Now display the date in YYYY/MM/DD format.</para>
	<screen>date +%Y/%m/%d</screen>
	<para>10. Issue the <command>cal</command> command. Display a calendar of 1582 and 1752. Notice anything special ?</para>
	<screen>cal 1582</screen>
	<para>The calendars are different depending on the country. Check http://linux-training.be/files/studentfiles/dates.txt</para>
</section>
