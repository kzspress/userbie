<?hard-pagebreak?>
<section><title>one time jobs with at</title>
<section><title>at</title>
	<para>Simple scheduling can be done with the <command>at</command><indexterm><primary>at(1)</primary></indexterm> command. This screenshot shows the scheduling of the date command at 22:01 and the sleep command at 22:03.</para> 
	<screen>root@laika:~# at 22:01
at&#062; date
at&#062; &#060;EOT&#062;
job 1 at Wed Aug  1 22:01:00 2007
root@laika:~# at 22:03
at&#062; sleep 10
at&#062; &#060;EOT&#062;
job 2 at Wed Aug  1 22:03:00 2007
root@laika:~#</screen>
	<para><emphasis>In real life you will hopefully be scheduling more useful commands ;-)</emphasis></para>
</section>
<section><title>atq</title>
	<para>It is easy to check when jobs are scheduled with the <command>atq</command><indexterm><primary>atq(1)</primary></indexterm> or <command>at -l</command> commands.</para>
	<screen>root@laika:~# atq
1       Wed Aug  1 22:01:00 2007 a root
2       Wed Aug  1 22:03:00 2007 a root
root@laika:~# at -l
1       Wed Aug  1 22:01:00 2007 a root
2       Wed Aug  1 22:03:00 2007 a root
root@laika:~#</screen>
	<para>The at command understands English words like tomorrow and teatime to schedule commands the next day and at four in the afternoon.</para>
	<screen>root@laika:~# at 10:05 tomorrow
at&#062; sleep 100
at&#062; &#060;EOT&#062;
job 5 at Thu Aug  2 10:05:00 2007
root@laika:~# at teatime tomorrow
at&#062; tea
at&#062; &#060;EOT&#062;
job 6 at Thu Aug  2 16:00:00 2007
root@laika:~# atq
6       Thu Aug  2 16:00:00 2007 a root
5       Thu Aug  2 10:05:00 2007 a root
root@laika:~#</screen>
</section>
<?hard-pagebreak?>
<section><title>atrm</title>
	<para>Jobs in the at queue can be removed with <command>atrm</command><indexterm><primary>atrm(1)</primary></indexterm>.</para>
	<screen>root@laika:~# atq
6       Thu Aug  2 16:00:00 2007 a root
5       Thu Aug  2 10:05:00 2007 a root
root@laika:~# atrm 5
root@laika:~# atq
6       Thu Aug  2 16:00:00 2007 a root
root@laika:~#</screen>
</section>
<section><title>at.allow and at.deny</title>
	<para>You can also use the <command>/etc/at.allow</command><indexterm><primary>/etc/at.allow</primary></indexterm> and <command>/etc/at.deny</command><indexterm><primary>/etc/at.deny</primary></indexterm> files to manage who can schedule jobs with at.</para>
	<para>The <command>/etc/at.allow</command> file can contain a list of users that are allowed to schedule <command>at</command> jobs. When <command>/etc/at.allow</command> does not exist, then everyone can use <command>at</command> unless their username is listed in <command>/etc/at.deny</command>.</para>
	<para>If none of these files exist, then everyone can use <command>at</command>.</para>
</section>
</section>
<?hard-pagebreak?>
<section><title>cron</title>
	<section><title>crontab file</title>
		<para>The <command>crontab(1)</command><indexterm><primary>crontab(1)</primary></indexterm> command can be used to maintain the <command>crontab(5)</command><indexterm><primary>crontab(5)</primary></indexterm> file. Each user can have their own crontab file to schedule jobs at a specific time. This time can be specified with five fields in this order: minute, hour, day of the month, month and day of the week. If a field contains an asterisk (*), then this means all values of that field. </para>
		<para>The following example means : run script42 eight minutes after two, every day of the month, every month and every day of the week.</para>
		<screen>8 14 * * * script42</screen>
		<para>Run script8472 every month on the first of the month at 25 past midnight.</para>
		<screen>25 0 1 * * script8472</screen>
		<para>Run this script33 every two minutes on Sunday (both 0 and 7 refer to Sunday).</para>
		<screen>*/2 * * * 0</screen>
		<para>Instead of these five fields, you can also type one of these: @reboot, @yearly or @annually, @monthly, @weekly, @daily or @midnight, and @hourly.</para>
	</section>
	<section><title>crontab command</title>
		<para>Users should not edit the crontab file directly, instead they should type <command>crontab -e</command> which will use the editor defined in the EDITOR or VISUAL environment variable. Users can display their cron table with <command>crontab -l</command>.</para>
	</section>
	<section><title>cron.allow and cron.deny</title>
		<para>The <command>cron daemon</command> <command>crond</command> is reading the cron tables, taking into account the <command>/etc/cron.allow</command><indexterm><primary>/etc/cron.allow</primary></indexterm> and <command>/etc/cron.deny</command><indexterm><primary>/etc/cron.deny</primary></indexterm> files.</para>
		<para>These files work in the same way as <command>at.allow</command> and <command>at.deny</command>. When the <command>cron.allow</command> file exists, then your username has to be in it, otherwise you cannot use <command>cron</command>. When the <command>cron.allow</command> file does not exists, then your username cannot be in the <command>cron.deny</command> file if you want to use <command>cron</command>.</para>
	</section>
<?hard-pagebreak?>
	<section><title>/etc/crontab</title>
		<para>The <command>/etc/crontab</command> file contains entries for when to run hourly/daily/weekly/monthly tasks. It will look similar to this output.</para>
		<screen>SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

20 3 * * *        root    run-parts --report /etc/cron.daily
40 3 * * 7        root    run-parts --report /etc/cron.weekly
55 3 1 * *        root    run-parts --report /etc/cron.monthly</screen>
	</section>
	<section><title>/etc/cron.*</title>
		<para>The directories shown in the next screenshot contain the tasks that are run at the times scheduled in <command>/etc/crontab</command><indexterm><primary>/etc/crontab</primary></indexterm>. The <command>/etc/cron.d</command><indexterm><primary>/etc/cron.d</primary></indexterm> directory is for special cases, to schedule jobs that require finer control than hourly/daily/weekly/monthly.</para>
		<screen>paul@laika:~$ ls -ld /etc/cron.*
drwxr-xr-x 2 root root 4096 2008-04-11 09:14 /etc/cron.d
drwxr-xr-x 2 root root 4096 2008-04-19 15:04 /etc/cron.daily
drwxr-xr-x 2 root root 4096 2008-04-11 09:14 /etc/cron.hourly
drwxr-xr-x 2 root root 4096 2008-04-11 09:14 /etc/cron.monthly
drwxr-xr-x 2 root root 4096 2008-04-11 09:14 /etc/cron.weekly</screen>
	</section>
	<section><title>/etc/cron.*</title>
		<para>Note that Red Hat uses <command>anacron</command> to schedule daily, weekly and monthly cron jobs.</para>
		<screen>root@rhel65:/etc# cat anacrontab
# /etc/anacrontab: configuration file for anacron

# See anacron(8) and anacrontab(5) for details.

SHELL=/bin/sh
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
# the maximal random delay added to the base delay of the jobs
RANDOM_DELAY=45
# the jobs will be started during the following hours only
START_HOURS_RANGE=3-22

#period in days   delay in minutes   job-identifier   command
1       5       cron.daily              nice run-parts /etc/cron.daily
7       25      cron.weekly             nice run-parts /etc/cron.weekly
@monthly 45     cron.monthly            nice run-parts /etc/cron.monthly
root@rhel65:/etc#</screen>
	</section>
</section>
