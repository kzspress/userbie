<?hard-pagebreak?>
<section><title>priority and nice values</title>
	<section><title>introduction</title>
		<para>All processes have a <command>priority</command> and a <command>nice</command><indexterm><primary>nice(1)</primary></indexterm> value. Higher priority processes will get more <command>cpu time</command> than lower priority processes. You can influence this with the <command>nice</command> and <command>renice</command><indexterm><primary>renice(1)</primary></indexterm> commands.</para>
	</section>
	<section><title>pipes (mkfifo)</title>
		<para>Processes can communicate with each other via <command>pipes</command><indexterm><primary>pipes</primary></indexterm>. These <command>pipes</command> can be created with the <command>mkfifo</command><indexterm><primary>mkfifo</primary></indexterm> command.</para>
		<para>The screenshots shows the creation of four distinct pipes (in a new directory).</para>
		<screen>
paul@ubuntu910:~$ mkdir procs
paul@ubuntu910:~$ cd procs/
paul@ubuntu910:~/procs$ mkfifo pipe33a pipe33b pipe42a pipe42b
paul@ubuntu910:~/procs$ ls -l
total 0
prw-r--r-- 1 paul paul 0 2010-04-12 13:21 pipe33a
prw-r--r-- 1 paul paul 0 2010-04-12 13:21 pipe33b
prw-r--r-- 1 paul paul 0 2010-04-12 13:21 pipe42a
prw-r--r-- 1 paul paul 0 2010-04-12 13:21 pipe42b
paul@ubuntu910:~/procs$
		</screen>
	</section>
	<section><title>some fun with cat</title>
		<para>To demonstrate the use of the <command>top</command> and <command>renice</command> commands we will make the <command>cat</command> command use the previously created <command>pipes</command> to generate a full load on the <command>cpu</command>.</para>
		<para>The <command>cat</command> is copied with a distinct name to the current directory. (This enables us to easily recognize the processes within <command>top</command>. You could do the same exercise without copying the cat command, but using different users. Or you could just look at the <command>pid</command> of each process.)</para>
		<screen>
paul@ubuntu910:~/procs$ cp /bin/cat proj33
paul@ubuntu910:~/procs$ cp /bin/cat proj42
paul@ubuntu910:~/procs$ echo -n x | ./proj33 - pipe33a &#062; pipe33b &#038;
[1] 1670
paul@ubuntu910:~/procs$ ./proj33 &#060;pipe33b &#062;pipe33a &#038;
[2] 1671
paul@ubuntu910:~/procs$ echo -n z | ./proj42 - pipe42a &#062; pipe42b &#038;
[3] 1673
paul@ubuntu910:~/procs$ ./proj42 &#060;pipe42b &#062;pipe42a &#038;
[4] 1674
		</screen>
		<para>The commands you see above will create two <command>proj33</command> processes that use <command>cat</command> to bounce the x character between <command>pipe33a</command> and <command>pipe33b</command>. And ditto for the z character and <command>proj42</command>.</para>
	</section>
<?hard-pagebreak?>
	<section><title>top</title>
		<para>Just running <command>top</command> without options or arguments will display all processes and an overview of innformation. The top of the <command>top</command> screen might look something like this.</para>
		<screen>
top - 13:59:29 up 48 min,  4 users,  load average: 1.06, 0.25, 0.14
Tasks: 139 total,   3 running, 136 sleeping,   0 stopped,   0 zombie
Cpu(s):  0.3%us, 99.7%sy, 0.0%ni, 0.0%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%st
Mem:    509352k total,   460040k used,    49312k free,    66752k buffers
Swap:   746980k total,        0k used,   746980k free,   247324k cached
		</screen>
		<para>Notice the <command>cpu idle time (0.0%id)</command> is zero. This is because our <command>cat</command> processes are consuming the whole <command>cpu</command>. Results can vary on systems with four or more <command>cpu cores</command>.</para>
	</section>
	<section><title>top -p</title>
		<para>The <command>top -p 1670,1671,1673,1674</command> screenshot below shows four processes, all of then using approximately 25 percent of the <command>cpu</command>.</para>
		<screen>
paul@ubuntu910:~$ top -p 1670,1671,1673,1674

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
 1674 paul      20   0  2972  616  524 S 26.6  0.1   0:11.92 proj42
 1670 paul      20   0  2972  616  524 R 25.0  0.1   0:23.16 proj33
 1671 paul      20   0  2972  616  524 S 24.6  0.1   0:23.07 proj33
 1673 paul      20   0  2972  620  524 R 23.0  0.1   0:11.48 proj42
		</screen>
		<para>All four processes have an equal <command>priority (PR)</command>, and are battling for <command>cpu time</command>. On some systems the <command>Linux kernel</command> might attribute slightly varying <command>priority values</command>, but the result will still be four processes fighting for <command>cpu time</command>.</para>
	</section>
	<section><title>renice</title>
		<para>Since the processes are already running, we need to use the <command>renice</command><indexterm><primary>renice</primary></indexterm> command to change their <command>nice value (NI)</command>.</para>
		<para>The screenshot shows how to use <command>renice</command> on both the <command>proj33</command> processes.</para>
		<screen>
paul@ubuntu910:~$ renice +8 1670
1670: old priority 0, new priority 8
paul@ubuntu910:~$ renice +8 1671
1671: old priority 0, new priority 8
		</screen>
		<para>Normal users can attribute a <command>nice value</command> from zero to 20 to processes they own. Only the <command>root</command> user can use negative nice values. Be very careful with negative nice values, since they can make it impossible to use the keyboard or ssh to a system.</para>
	</section>
<?hard-pagebreak?>
	<section><title>impact of nice values</title>
		<para>The impact of a nice value on running processes can vary. The screenshot below shows the result of our <command>renice +8</command> command. Look at the <command>%CPU</command> values.</para>
		<screen>
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
 1674 paul      20   0  2972  616  524 S 46.6  0.1   0:22.37 proj42
 1673 paul      20   0  2972  620  524 R 42.6  0.1   0:21.65 proj42
 1671 paul      28   8  2972  616  524 S  5.7  0.1   0:29.65 proj33
 1670 paul      28   8  2972  616  524 R  4.7  0.1   0:29.82 proj33
		</screen>
		<para>Important to remember is to always make less important processes nice to more important processes. Using <command>negative nice values</command> can have a severe impact on a system's usability.</para>
	</section>
	<section><title>nice</title>
		<para>The <command>nice</command><indexterm><primary>nice</primary></indexterm> works identical to the <command>renice</command> but it is used when starting a command.</para>
		<para>The screenshot shows how to start a script with a <command>nice</command> value of five.</para>
		<screen>
paul@ubuntu910:~$ nice -5 ./backup.sh
		</screen>
	</section>
</section>
